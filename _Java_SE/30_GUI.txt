GUI
  全称:Graphical User Interface 图形用户接口 CLI命令行用户接口   Command line

  import java.awt.*; Abstract window toolkit 重量级
  import java.awt.event.*;
  import javax.swing.*;  轻量级
  eclipse的swp包

  GUI的继承关系图
  Component 构件
    Container 容器
      Window  窗口
        Frame 框架
        Dialog  对话框
          FileDialog  文件对话框
      Panel 面板
    Button 按钮
    Label 标签
    Checkbox 选择框
    TextComponent 文本构件
      TextArea 文本区
      TextField 文本框

  java的布局管理器
    流式布局 FlowLayout 为Panel默认，从左至右
    边界布局管理器 BorderLayout 为Frame默认布局 东南西北中
    网格布局 GridLayout
    卡片布局  CardLayout
    网格包布局 GridBagLayout


----------------------------
Frame f = new Frame("标题");
f.setSize(宽，高);-------------|
f.setLocation();窗口出现位置----|====>setBounds(,,,)
f.setLayout(new FlowLayout());
f.setVisible(true);

Button b = new Button("按钮提示");
f.add(b);

----------------------------------
事件监听器
特点：
1，事件源。
2，事件。
3，监听器。
4，事件处理。

事件源：就是awt包或者swing包中的那些图形界面组件。
事件：每一个事件源都有自己特有的对应事件和共性事件。
监听器：将可以触发某一个事件的动作（不只一个动作）都已经封装到了监听器中。

以上三者，在java中都已经定义好了。
直接获取其对象来用就可以了。
我们要做的事情是，就是对产生的动作进行处理。

addWindowListener(参数);
  该监听器参数里面需要实现7个抽象接口方法--->
    WindowAdapter 抽象类，已经实现监听器接口，并覆盖了其中的所有方法，我们只需要继承该类并覆盖需要的方法

    f.addWindowListener(new WindowAdapter(){
      public void windowClosing(WindowEvent e){
        System.exit(0)
      }
    });

但窗口处于最前端就能触发Active事件

--------------------------------
键盘监听事件
  but.addKeyListener(new KeyAdapter(){
    public void keyPressed(KeyEvent e){
      e.getKeyCode(); 获取键盘输入字符的ASCII码
      e.getKeyText(e.getKeyCode()) 获取键盘按下的字符
        isControlDown() 组合键，con是否被按下
        is....Down()
    }
  });
---------------------------------
文本框监听事件
  tf = new TextField(int) 文本框长度
  tf.addKeyListener(new KeyAdapter()){
    public void keyPressed(KeyEvent e){
      if(e.getKeyCode()>=KeyEvent.VK_0&&...){
        e.consume(); 禁止输入
      }
    }
  };
