设计模式：解决某一类问题最有效的方法
  Java 23种设计模式

单例设计模式:【一个类在内存只存在一个对象】比如对某些软件的全局配置文件
  1.为了避免其他程序过多的建立该类对象，先禁止其他程序建立该类对象---->构造函数私有化 private Class(){};
  2.还为了让其他程序可以访问到该类对象，就需要在本类中自定义一个对象---->在类中创建一个本类对象
  3.为了方便其他程序对自定义对象的访问，可以提供一些访问方式--->提供一个方法可以过去到该对象

  当这个唯一的对象被建立，就将堆内存的地址值赋给方法区的null地址值

  class Class{
    private Class(){}
    private static Class c = new Class();  //静态方法只能访问静态成员，所以成员也需要静态 第一种写法：饿汉式写法
    //*private static Class c = null; //第二种写法：懒汉式 对象是延时加载的 不常用，因为容易产生线程冲撞
    public static (synchronized) Class getInstance(){ //不能创建对象后，就只能通过静态去获取方法
      return c;
      //*  if(c==null)   //懒汉式
      //*    c = new Class(); 当一个类在调用getInstance()时，另一个类也可能在调用，此时就会出现两个对象；此时解决的方法-->在getInstance方法上加锁synchronized--->更深的解决方法--->在if(c==null)上再加上if(c==null){synchronized(Class.class){懒汉式}}  减少判断锁的次数不然谁进来都要读getInstance的锁------------>Class.class 叫做该类所属的字节码文件对象
      //*  return c;
    }
  }

  所以其他类调用只需要通过 Class c = Class.getInstance()；

  而且此时的对象操作是全局有效的
  Class c1 = Class.getInstance();
  Class c2 = Class.getInstance();
  c1.set...(值)
  c2.get...(值) //c2获取的值与c1设置的值是一样的


----------------------------------------------------------------------
装饰设计模式 对原有功能的增强
  当想要对已有的对象进行功能增强时
  可以定义类，将已有对象传入，基于已有的功能，并提供功能加强
  那么自定义的该类称为装修类

  Class Old{
    public void method(){

    }
  }

  Class New{
    private Old o;
    New(Old o){
      this.o = o;
    }
    public void newMethod(){
      ...
      o.method();
      ...
    }
  }

  装饰和继承
    找到其参数的共同类型。通过多态的形式。可以提高扩展性。
    MyReader//专门用于读取数据的类。
    	|--MyTextReader
//    		|--MyBufferTextReader
    	|--MyMediaReader
//    		|--MyBufferMediaReader
    	|--MyDataReader
//    		|--MyBufferDataReader
  --->|--MyBufferReader
    //class MyBufferReader{
    	MyBufferReader(MyTextReader text){}
    	MyBufferReader(MyMediaReader media){}
    }
    上面这个类扩展性很差。


    class MyBufferReader extends MyReader  {
    	private MyReader r;
    	MyBufferReader(MyReader r)
    	{}
    }

    以前是通过继承将每一个子类都具备缓冲功能。
    那么继承体系会复杂，并不利于扩展。

    现在优化思想。单独描述一下缓冲内容。
    将需要被缓冲的对象。传递进来。也就是，谁需要被缓冲，谁就作为参数传递给缓冲区。
    这样继承体系就变得很简单。优化了体系结构。

    装饰模式比继承要灵活。避免了继承体系臃肿。
    而且降低了类于类之间的关系。

    装饰类因为增强已有对象，具备的功能和已有的是相同的，只不过提供了更强功能。
    所以装饰类和被装饰类通常是都属于一个体系中的。



==================================================================
在JDBC中的装饰者模式(静态代理)
  使用步骤：
    1.装饰者和被装饰者必须实现同一个接口或者继承同一个类
    2.装饰者中要有被装饰者的引用
    3.对需要增强的方法进行加强
    4.对不需要加强的方法调用原来的方法
