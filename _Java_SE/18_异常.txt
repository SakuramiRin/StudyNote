异常【try catch finally  throws throw】
  是对问题的描述。将问题进行对象封装
  对于Thorwable的划分：
    错误：Error 不编写针对性代码进行处理
    异常：Exception  可针对性处理
    将异常封装成对象
    一旦发生异常，方法就结束
    如果多个catch块中的异常出现继承关系，父类异常catch块放在最下面

  异常有两种：
    编译时被检测异常
      异常在编译时，没有处理，即没有抛也没有try，编译失败
      异常被标识，代表这可以被处理
    运行时异常
      在编译时，不需要处理，编译器不检测，所以当该异常发生时，建议不处理，让程序停止以便修正代码
-----------------------------------

  try{
    被检测的代码
      当throw new Exception();时，方法上不抛出：
      原则是问题在内部中被解决了，问题就可以不声明
  }
  catch(异常类 变量){   (Exception e)  ---->针对性处理
    处理异常的代码
      常见的操作有：
        .getMessage();
        .toString(); 异常名称：异常信息
        .printStackTrace();  打印堆栈跟踪信息
  }
  catch(){
    两种操作：抛出 或 处理
    如果我们定义了专门对异常进行处理的方法，需要抛出时，要重新定义新的异常以返回方法调用者所应该知道的结果
  }
  fianlly{
    一定执行的语句(除非System.exit(0);)，即使catch中有return语句结束了该函数-->通常用于关闭资源
      实例：对于数据库操作，连接到数据库后，无论是否进行了数据库操作都需要执行关闭数据库操作
  }

  方法 throws Exception 声明该功能有可能会出现问题
  当调用有问题的功能时，两种解决方式：捕捉、声明 以便抛出

  自定义异常将特有问题封装，需要继承Exception，如果该异常发生就无法继续进行运算，就需要继承RuntimeException
    编译时不被检测到的异常就是RuntimeException子类
  在其他类中的逻辑代码块中，发生了，就 throw new 自定义异常类();
  当在函数内部出现throw抛出异常对象，那么就必须要给出对应的处理操作
    要么在内部try catch处理
    要么在函数上声明让调用这进行处理(一般情况)
  对于toString()自定义异常，打印的结果是只有异常信息，却没有异常信息-->重写getMessage()方法，同时throwable类中存在构造函数
  throwable(String getMessage){}
  那么可以直接调用父类方法
    MyException extends Exception{
      MyException(String msg){
        super(msg);
      }
    }

    之后在抛出自定义异常对象的时候，带上msg
    throw new MyException(" ... ");
      thorw下面不能有执行语句，不然是当异常发生的时候是读不到的

  throw throw 区别：
    throws使用在函数上，后面跟的是异常类，可以跟多个，用逗号隔开
      当函数上抛出的是RuntimeException，调用者不trycatch也们通过
    throw使用在函数内，后面跟的是异常对象
      当抛出的异常是RuntimeException，函数上不抛也可以通过
  之所以不在函数上声明，是因为需要让调用者处理
  当该异常发生，希望程序停止，因为在运行时出现了无法继续运行的情况


  对于空指针异常判断if("比较字符串".equals(st)) 可解决st传入null参数时的异常


-----------------------------------------------------------------------
格式三种 ：
  try{

  }
  catch(){

  }
  ----
  try{

  }
  catch(){

  }
  fianlly{

  }
  -----
  try{
    throw new Exception();//此时，编译不能通过，因为问题没有被解决，问题是否被解决就看有没有catch在
  }
  fianlly{
    此时的fianlly里面也是用于关闭资源的
  }

  catch是用于异常处理。如果没有catch就代表异常没有被处理过，如果该异常是检测时异常，那么久必须声明

------------------------------
异常在子父类覆盖中的体现
  1：子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法时，要不不抛异常，要不只能抛出父类的异常或者该异常的子类
  2：如果父类方法抛出多个异常，那么子类在覆盖方法时，只能抛出父类异常的子集
  3：如果父类或者接口中的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常
    如果子类方法发生了异常，就必须要进行try处理
--------------------------------
标准 MyException写法？
  class MyException extends Exception{
    MyException(String message){
      super(message);
    }
  }

----------------------------------
处理原则：
  1处理方式两种：try throws
  2抛出时，抛出几个处理几个，一个try多个catch
  3多个catch时，父类catch放最下
  catch内，需要定义针对的处理方式，不要简单的定义printStackTrace，输出语句，当捕获到的异常，本功能处理不了时，可以继续在catch中抛出

  或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，当调用者知道。并处理。也可以将捕获异常处理后，转换新的异常
    try{
      throw new AException();
    }
    catch(AException e){
      throw e;
    }

    如果该异常处理不了，但不属于该功能出现的异常
    可以将异常转换后，在抛出和该功能相关的异常
    try
    {
      throw new AException();
    }
    catch (AException e)
    {
      // 对AException处理。
      throw new BException();
    }
    比如汇款

【看看给的练习】


--------------------------------
异常日志信息  log4j
  printStackTrace(new PrintStream("目的文件.txt"));  会抛异常
  或者变为
    System.setOut(new PrintStream("exception.log"));
    e.printStackTrace(System.out);


    import java.io.*;
    import java.util.*;
    import java.text.*;
    class  ExceptionInfo{
    	public static void main(String[] args)throws IOException {
    		try{}
    		catch (Exception e){
    			try{
    				Date d = new Date();
    				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    				String s = sdf.format(d);

    				PrintStream ps = new PrintStream("exeception.log");
    				ps.println(s);
    				System.setOut(ps);
    			}
    			catch (IOException ex){
    				throw new RuntimeException("日志文件创建失败");
    			}
    			e.printStackTrace(System.out);
    		}
    	}
    }
