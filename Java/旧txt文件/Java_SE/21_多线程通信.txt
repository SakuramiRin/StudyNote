线程通讯：
  多个线程操作同一资源但操作动作不同(拉煤取煤)

保证线程通讯操作成功的两个前提
  1.有两线程
  2.处理的锁是同一个

等待唤醒机制
  class Res  资源类
  {
    String name;     可进行set get的优化
    String sex;
    boolean flag = false; 标志位,判断有没有资源
  }

  class Input implements Runnable 输入线程
  {
    private Res r ; 操作资源类
    Input(Res r)
    {
      this.r = r;
    }
    public void run() 线程动作
    {
      int x = 0; 对象的两个数据转换交替插入
      while(true)
      {
        synchronized(r) 锁住对象可以是Input.class Output.class---->防止在数据存到一半时被抢夺资源，出现 丽丽man的情况
        {

          if(r.flag) 如果对象的flag为真
            try{r.wait();}catch(Exception e){}  解决某一线程多次抢到执行权，而出现无法交替录入的情况就需要等待，而r.wait的含义就是持有r这个锁的线程等待，我们指定r.是因为同步会出现嵌套
          if(x==0)
          {
            r.name="mike"; 如果x 存一个数据
            r.sex="man";
          }
          else  再存一个不同的数据
          {
            r.name="丽丽";
            r.sex = "女女女女女";
          }
          x = (x+1)%2;  0,1 交替存数据
          r.flag = true;  置位flag真
          r.notify(); 唤醒线程
        }
      }
    }
  }

  class Output implements Runnable
  {
    private Res r ;

    Output(Res r)
    {
      this.r = r;
    }
    public void run()
    {
      while(true)
      {
        synchronized(r)
        {
          if(!r.flag)
            try{r.wait();}catch(Exception e){}
          System.out.println(r.name+"...."+r.sex);
          r.flag = false;
          r.notify(); 标识锁r.
        }
      }
    }
  }


  class  InputOutputDemo
  {
    public static void main(String[] args)
    {
      Res r = new Res(); 实例对象
      /*
      Input in = new Input(r);  实例输入(输入卡车) 凡是实现了Runnable接口的都需要实例化对象
      Output out = new Output(r); 实例输出卡车

      Thread t1 = new Thread(in); 创建输入线程
      Thread t2 = new Thread(out);  创建输出线程

      t1.start();
      t2.start();
      */
      可以优化成new Thread(new Input(r)).start();
      new Thread(new Output(r)).start();
    }
  }
wait的所有线程，按照先进先出的顺序，存放于线程池中

notifyAll()；唤醒线程池所有线程

都使用在同步中，因为要对持有监视器(锁)的线程操作。
所以要使用在同步中，因为只有同步才具有锁的概念。

操作线程的方法都是定义在Object类中的，因为锁可以是任意对象，这些方法在操作同步中线程时，都必须要标识它们所操作线程只有的锁，只有同一个锁上的被等待线程，可以被同一个锁上notify唤醒。
不可以对不同锁中的线程进行唤醒-------------->也就是说，等待和唤醒必须是同一个锁
而锁可以是任意对象，所以可以被任意对象调用的方法定义Object类中

-----------------------------------------------------
class ProducerConsumerDemo
{
	public static void main(String[] args)
	{
		Resource r = new Resource();

		Producer pro = new Producer(r);
		Consumer con = new Consumer(r);

		Thread t1 = new Thread(pro);
		Thread t2 = new Thread(pro);
		Thread t3 = new Thread(con);    当我们多条线程在执行输入操作的时候，不到会出现上面的叠加通讯问题，还会出现进2出1，或者进1出2的问题
		Thread t4 = new Thread(con);

		t1.start();
		t2.start();
		t3.start();
		t4.start();

	}
}


class Resource
{
	private String name;
	private int count = 1;
	private boolean flag = false;
			//  t1    t2
	public synchronized void set(String name)
	{
		//if(flag) 当全部执行完一轮，t2,t3,t4依次进了线程池中，t1获取到了执行权
			try{this.wait();}catch(Exception e){}//t1(放弃资格)  t2(获取资格) 这时，如果t1执行完本轮操作，将flag置为真后，再wait()处放弃资格，t2在wait()处被唤醒，获得了执行权后，将不再判断flag，跳过了while(flag)语句，导致前一个资源被覆盖，也就是说，t1已经存了数据了，但是t2并不知道
    while(flag) 所以此时要用while，让被唤醒的线程再一次判断标记
		this.name = name+"--"+count++;

		System.out.println(Thread.currentThread().getName()+"...生产者.."+this.name);
		flag = true;
    //this.notify();  t1执行完放弃资格后，有资源了，此时如果是notify(),将可能唤醒t2一样进资源，而正确的是应该只唤醒Output出资源
		this.notifyAll();
	}


	//  t3   t4
	public synchronized void out()
	{
		while(!flag)
			try{wait();}catch(Exception e){}//t3(放弃资格) t4(放弃资格)
		System.out.println(Thread.currentThread().getName()+"...消费者........."+this.name);
		flag = false;
		this.notifyAll();     防止全等待
	}
}

class Producer implements Runnable
{
	private Resource res;

	Producer(Resource res)
	{
		this.res = res;
	}
	public void run()
	{
		while(true)
		{
			res.set("+商品+");
		}
	}
}

class Consumer implements Runnable
{
	private Resource res;

	Consumer(Resource res)
	{
		this.res = res;
	}
	public void run()
	{
		while(true)
		{
			res.out();
		}
	}
}

不要while，数据就是错的，
可是当改变为while后，又会出现4条线程全部放弃资格的(死锁)情况

当出现多个生成，消费同时在做一件事情的时候，必须要写while 和notifyAll()

--------------------------------------------------------------
JDK5.0关于通讯问题的解决【Lock】
实现一个锁上的多个对象Condition控制，以便只唤醒对方
import java.util.concurrent.locks.*;
  Lock 替代了 synchronize方法和语句的使用,一个锁上可以有多个condition
  Condition 替代了Object监视器使用
    wait() --->await()
    notify()--->signal()
    notifyAll()-->signalAll()

    private Lock lock = new Renntrantlock();
    private Condition conditon_pro = lock.newCondition();
    private Condition conditon_con = lock.newCondition();
    ...
    throws InterruptedException
    {
      lock.lock();
      try{
        conditon_con.await();
      ...
        //conditon.signalAll();
        condition_pro.signal();
      }
      finally{
        lock.unlock();
      }
    }
