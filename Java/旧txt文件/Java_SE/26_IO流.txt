IO流
  import java.io.*;
  用来处理设备之间的数据传输，数据的最常见体现形式：文件
  java对数据的操作通过流的方式进行，操作流的对象都在IO包中

  流按操作数据分：
    字节流
      抽象基类：InputStream OutputStream
    字符流
      抽象基类：Reader Writer
  按流向分：
    输入流
    输出流

    其他子类满足：后缀名是父类名，前缀名是该流对象的功能。

    ------------------------------------------
    写：
    创建一个FileWriter对象，该对象一被初始化就必需明确被操作的文件，同时需要抛出异常IOException，然后文件会以覆盖形式被创建到指定目录
    FileWriter fw = new FileWriter("文件名")；
    fw.witer("",boolean )  //---------->写入至内存流中 是否是添加数据到文件末尾处
    fw.flush();//-------->刷新流对象中的缓冲数据至目的地文件
    fw.close();//---------->刷新之后关闭流文件

  -------------------------------------------------
  IO异常处理
    在外面建立引用，在try建立初始化，不然无法执行fw.close(),同时，fw.close()也会抛出异常，也需要单独try处理
    FileWriter fw = null;
    try{
      fw.writer("")
    }
    catch(IOException e){

    }
    finally{
      try{
        if(fw!=null)
          fw.close();
      }
      catch(IOException e){

      }
    }
    注意回车书写需要两个转移字符\r\n

-------------------------------------------------
    读：
      1:
        FileReader fr = new FileReader("");
        read();以单个字符读取的方法默认是ASCII码，需要强转char，如果已到末尾，则返回-1

        while(true){
          int ch = fr.read();
          if(ch==-1){
            break
          }
        }

        简化下
          while((ch=fr.read())!=-1){

          }
     2:通过字符数组的形式
     char[] buf = new char[1024]; 尽量使用1024
      fr.read(buf);
      注意：反复进行read的时候，数组是不断从第一个位置重新写

    FileReader fr = new FileReader("1.txt");
		char[] buf = new char[1024];
		int num = 0;
		while((num=fr.read(buf))!=-1) {
			System.out.print(new String(buf,0,num));
		}
		fr.close();


  --------------------------------------------------
  标准拷贝文件程序
  public static void copy_2()
	{
		FileWriter fw = null;
		FileReader fr = null;
		try
		{
			fw = new FileWriter("SystemDemo_copy.txt");
			fr = new FileReader("SystemDemo.java");

			char[] buf = new char[1024];

			int len = 0;
			while((len=fr.read(buf))!=-1)
			{
				fw.write(buf,0,len);
			}
		}
		catch (IOException e)
		{
			throw new RuntimeException("读写失败");

		}
		finally
		{
			if(fr!=null)
				try
				{
					fr.close();
				}
				catch (IOException e)
				{
				}
			if(fw!=null)
				try
				{
					fw.close();
				}
				catch (IOException e)
				{
				}
		}
	}



-------------------------------------------------------------------------
字符流缓冲区
  提高对数据的读写效率
  在流的基础上对流的功能进行了增强

  对应类
    BufferedWriter
    BufferedReader
    无空参构造函数--->现有流对象

  缓冲区需要结合流才能使用(下载缓冲)
    throws IOException
  FileWriter fw = new FileWriter("buf.txt");
  BufferedWriter bufw = new BufferedWriter(fw);

  bufw.writer(" "); bufw.newLine() 换行
  bufw.flush(); 记得刷新
  bufw.close();
  //fw.close(); 不写


  FileReader fr = new FileReader("buf.txt");
  BufferedReader bufr = new BufferedReader(fr);

  String line = null;
  While((line = bufr.readLine())!=null){ readLine 一次读一行

  }

  bufr.close();

  ------------------------
  复制文件标准写法
  import java.io.*;

  class  CopyTextByBuf{
  	public static void main(String[] args) {
  		BufferedReader bufr = null;
  		BufferedWriter bufw = null;

  		try{
  			bufr = new BufferedReader(new FileReader("BufferedWriterDemo.java"));
  			bufw = new BufferedWriter(new FileWriter("bufWriter_Copy.txt"));

  			String line = null;

  			while((line=bufr.readLine())!=null){  readLine()不含终止符
  				bufw.write(line);
  				bufw.newLine();
  				bufw.flush();
  			}
  		}
  		catch (IOException e){
  			throw new RuntimeException("读写失败");
  		}
  		finally{
  			try{
  				if(bufr!=null)
  					bufr.close();
  			}
  			catch (IOException e){
  				throw new RuntimeException("读取关闭失败");
  			}
  			try{
  				if(bufw!=null)
  					bufw.close();
  			}
  			catch (IOException e){
  				throw new RuntimeException("写入关闭失败");
  			}
  		}
  	}
  }
  -----------------------------
    LineNumberReader
      getLineNumber();  打印行号
      setLineNumber(int); 设置行号


-------------------------------------------------
字节流
  InputStream 读
  OutputStream 写

    FileOutputStream fos = new FileOutputStream("fos.txt");
    fos.Writer(" ".getBytes());//不需要刷新
    fos.close();

    字节流特有读取数据方法
    public static void readFile_3()throws IOException
  	{
  		FileInputStream fis = new FileInputStream("fos.txt");
  		//		int num = fis.available();
  		byte[] buf = new byte[fis.available()];//定义一个刚刚好的缓冲区。不用在循环了，不过慎用防止内存溢出

  		fis.read(buf);

  		System.out.println(new String(buf));

  		fis.close();
  	}

    ------------------------------------
    拷贝图片
      FileOutputStream fos = null;
      FileInputStream fis = null;
      try{
        fos = new FileOutputStream("c:\\2.bmp") 新对象
        fis = new FileInputStream("c:\\1.bmp")  源对象

        byte[] buf = new byte[1024];
        int len = 0;
        while((len=fis.read(buf))!=-1){
          fos.writer(buf,0,len);
        }
      }
      catch(Exception e){

      }

      -------->
        BufferedInputStream bufis = new BufferedInputStream(new FileInputStream(""))
        BufferedOutputStream bufos = new BufferedOutputStream(new FileOutputStream(""))

        int by = 0;
        while((by=bufis.read())!=-1){
          bufos.writer(by);
        }
        bufos.close();bufis.close();
      ----------------------->
    自定义的buffered
        class MyBufferedInputStream{
          private InputStream in;
          private byte[] buf = new byte[1024*4];
          private int pos = 0,count = 0;

          MyBufferedInputStream(InputStream in){
            this.in = in;
          }

          //一次读一个字节，从缓冲区(字节数组)获取。
          public int myRead()throws IOException{ //注意这里的int不是byte
            //通过in对象读取硬盘上数据，并存储buf中。
            if(count==0){
              count = in.read(buf);
              if(count<0)
                return -1;
              pos = 0;
              byte b = buf[pos];

              count--;
              pos++;
              return b&255; ------>补数重点
            }

            else if(count>0){
              byte b = buf[pos];

              count--;
              pos++;
              return b&0xff; ------>补数重点
            }
            return -1;
          }
          public void myClose()throws IOException
          {
            in.close();
          }
        }

        当byte读取第一个字节的值为-1时，提升类型为int后还是为-1，变换是，存放格式将由1个字节提升为4个字节，使调用者 while((by=bufis.myRead())!=-1){bufo.writer(by);}直接判断了起始为1，停下操作
        为了避免这样的操作，我们希望在提升类型后int前的3个字节补充为0

-----------------------------------------------
读取键盘录入
  InputStream is = System.in;
  int by = in.read() 一次读取一个字节，并以ASCII码表数字返回，注意回车也属于键盘录入，并返回\r\n-->13 10
  ----------------------
  读取转换流
  其实就是读一行数据方法 readLine();但是readLine方法是字符流BufferedReader类中的方法，而键盘录入的read方法是字节流InputStream的方法---->
    public static void main(String[] args) throws IOException{
      InputStream in = System.in;
      StringBuilder sb = new StringBuilder();   //定义一个字符串缓冲区
      while(true){
        int ch = in.read();  读取
        if(ch=='\r')
          continue;
        if(ch=='\n'){
          String s = sb.toString(); 字符串缓冲区数据给String
          if("over".equals(s))
            break;
          System.out.println(s.toUpperCase());
          sb.delete(0,sb.length()); 清空缓冲区的数据
        }
        else
          sb.append((char)ch);  一个一个给缓冲区添加数据
      }
    }
    -------------------------------
  写入转换流
    {
    //获取键盘录入对象。
    //InputStream in = System.in;
    //将字节流对象转成字符流对象，使用转换流。InputStreamReader
		//InputStreamReader isr = new InputStreamReader(in);
		//为了提高效率，将字符串进行缓冲区技术高效操作。使用BufferedReader
		//BufferedReader bufr = new BufferedReader(isr);
      ------>BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));  读取一个键盘录入！！
      ------->BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));  控制台
      要充分理解 源于目的地 即System.in System.out  ，可替换为文件
      后续为
      String line = null;

  		while((line=bufr.readLine())!=null){
  			if("over".equals(line))
  				break;
  			bufw.write(line.toUpperCase());
  			bufw.newLine();
  			bufw.flush();
  		}

  		bufr.close();
    }

    流操作的基本规律：
    最痛苦的就是流对象有很多，不知道该用哪一个。

    通过三个明确来完成。

    1，明确源和目的。
    	源：输入流。InputStream  Reader
    	目的：输出流。OutputStream  Writer。
    2，操作的数据是否是纯文本。
    	是：字符流。
    	不是：字节流。

    3，当体系明确后，在明确要使用哪个具体的对象。
    	通过设备来进行区分：
    	源设备：内存，硬盘。键盘
    	目的设备：内存，硬盘，控制台。
<------------------------------------------------------------>
      1，将一个文本文件中数据存储到另一个文件中。复制文件。
      	源：因为是源，所以使用读取流。InputStream Reader
      	是不是操作文本文件。
      	是！这时就可以选择Reader
      	这样体系就明确了。

      	接下来明确要使用该体系中的哪个对象。
      	明确设备：硬盘。上一个文件。
      	Reader体系中可以操作文件的对象是 FileReader

      	是否需要提高效率：是！。加入Reader体系中缓冲区 BufferedReader.

      	FileReader fr = new FileReader("a.txt");
      	BufferedReader bufr = new BufferedReader(fr);

      	目的：OutputStream Writer
      	是否是纯文本。
      	是！Writer。
      	设备：硬盘，一个文件。
      	Writer体系中可以操作文件的对象FileWriter。
      	是否需要提高效率：是！。加入Writer体系中缓冲区 BufferedWriter

      	FileWriter fw = new FileWriter("b.txt");
      	BufferedWriter bufw = new BufferedWriter(fw);

      ---------------------------------------

      2，需求：将键盘录入的数据保存到一个文件中。
      	这个需求中有源和目的都存在。
      	那么分别分析
      	源：InputStream Reader
      	是不是纯文本？是！Reader

      	设备：键盘。对应的对象是System.in.
      	不是选择Reader吗？System.in对应的不是字节流吗？
      	为了操作键盘的文本数据方便。转成字符流按照字符串操作是最方便的。
      	所以既然明确了Reader，那么就将System.in转换成Reader。
      	用了Reader体系中转换流,InputStreamReader

      	InputStreamReader isr = new InputStreamReader(System.in);

      	需要提高效率吗？需要！BufferedReader
      	BufferedReader bufr = new BufferedReader(isr);

      	目的：OutputStream  Writer
      	是否是存文本？是！Writer。
      	设备：硬盘。一个文件。使用 FileWriter。
      	FileWriter fw = new FileWriter("c.txt");
      	需要提高效率吗？需要。
      	BufferedWriter bufw = new BufferedWriter(fw);


      	**************
      	扩展一下，想要把录入的数据按照指定的编码表（utf-8），将数据存到文件中。

      	目的：OutputStream  Writer
      	是否是存文本？是！Writer。
      	设备：硬盘。一个文件。使用 FileWriter。
      	但是FileWriter是使用的默认编码表。GBK.

      	但是存储时，需要加入指定编码表utf-8。而指定的编码表只有转换流可以指定。
      	所以要使用的对象是OutputStreamWriter。
      	而该转换流对象要接收一个字节输出流。而且还可以操作的文件的字节输出流。FileOutputStream

      	OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("d.txt"),"UTF-8");

      	需要高效吗？需要。
      	BufferedWriter bufw = new BufferedWriter(osw);

      	所以，记住。转换流什么使用。字符和字节之间的桥梁，通常，涉及到字符编码转换时，
      	需要用到转换流。
