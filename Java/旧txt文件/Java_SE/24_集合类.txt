集合类(集合框架) 【collection List Set  Map】
  存储对象,且存储的都是对象的引用
  import java.util.*;

  特点:数组与集合类同为容器，不同之处在于：数组存储对象长度是固定的，只能存储基本数据类型，而集合类长度是可变的，存储的是对象
  容器是按照不同方式对数据进行存储的：【数据结构】

  java集合类关系图
  Collection 接口--->单列集合
    List：该集合体系有索引，所以元素有序且可以重复
      List 集合判断元素是否相同，依据的是equals()方法
    特有方法：凡是可以操作角标的方法--->增删改查
            增
            	add(index,element);
            	addAll(index,Collection);
            删
            	remove(index);
            改
            	set(index,element);
            查
            	get(index):
            	subList(from,to);
            	indexOf(obj):获取指定元素的位置
              lastIndexOf()
            	ListIterator listIterator();

      ArrayList:底层的数据结构使用的是数组结构。特点：查询速度很快。但是增删稍慢。线程不同步 默认10空列表，50%延长
		  LinkedList:底层使用的链表数据结构。特点：增删速度很快，查询稍慢。线程不同步
        特有方法：
          addFirst();
          addLast();
          getFirst() 获取元素，但不删除元素  ---->1.6 peekFirtst()
          getLast()
          removeFirst() 获取元素并删除  --->1.6 pollFirst() //不会抛异常而抛null
          removeLast()
            while(! .isEmpty()){
              .removeFirst();
            }

		  //Vector:底层是数组数据结构。线程同步。被ArrayList替代了。因为效率低
        枚举就是Vector特有的取出方式
        发现枚举和迭代器很像
        其实枚举和迭代是一样的

        因为枚举的名称以及方法的名称都过长
        所以被迭代器取代了

    Set：元素无序，不可重复 100%延长  Set功能和collection一样
      HashSet：底层数据是Hash表
        Hash表在存储过程中，先比较Hash值，如果存在一样的Hash值，则还要在判断一次这两个对象是否为同一个对象，即两个方法hashCode()和equals()
        所以当我们在自定义对象的时候，我们定义一个对象，需要复写hashCode()和equals方法
        public int hashCode(){
      		return name.hashCode()+age*37;//*39是尽量保证hash值唯一
      	}

      	public boolean equals(Object obj)
      	{

      		if(!(obj instanceof Class))
      			return false;

      		Class c = (Class)obj;

      		return this.name.equals(p.name) && this.age == p.age;
      	}
        即对于判断元素是否存在，以及删除等操作，依赖的方法是元素的hashcode和equlas方法

      TreeSet：可以对Set集合中的元素进行ASCII排序，用到二叉树数据存储方式，二叉树取的顺序是先左后右再上
        那么在TreeSet存入数据时，必须要implements comparable接口使该对象具有比较性
        排序时，当主要条件相同时，要比较一下次要条件，不然会认为对象相同而无法存储
        保证元素为唯一性的依据是compareTo方法 return 0

        TreeSet排序的第一种方式：
          让元素自身具备比较性
  				元素需要实现Comparable接口，覆盖compareTo方法
  				也种方式也成为元素的自然顺序，或者叫做默认顺序
				TreeSet的第二种排序方式:
  				当元素自身不具备比较性时，或者具备的比较性不是所需要的
  				这时就需要让集合自身具备比较性
  				在集合初始化时，就有了比较方式--->构造函数

          定义了比较器，将比较器对象作为参数传递给TreeSet集合的构造函数。

          当两种排序都存在时，以比较器为主。

          定义一个类，实现Comparator接口，覆盖compare方法
          class MyCompare implements compartor{
            public    compare(Object o1,Object o2){

            }
          }
-----------------------------------------
容器的操作
  添加元素 .add(Object)
  获取长度 .size()
  删除元素 .remove(content)
  清空 .clear()
  判断存在 .contains(content)
  判断为空 .isEmpty()
  取交集 .retainAll(collection)
  取交集 .removeAll(collection)
  容器中的判断需要使用的是equals(Object object)方法

  迭代器：取出元素的方式--->把取出方式定义在集合的内部，这样取出方式就可以直接访问集合内容的元素，所以取出方式就被定义成立内部类---->而每一个容器的数据结构不同，所以取出的动作细节也不一样，但是都有判断取出，所以讲共性抽取

    .iterator()  返回Iterator接口类型 一个接口访问一个接口的子对象？  内部类符合Iterator规则，提供该方法
      Iterator 接口中
        .next() 访问下个元素对象
        .hasNext() 是否有下一个

        Iterator it = (new ArrayList()).iterator(); 获取迭代器，用于取出集合中的元素
        while(  .hasNext()){
          it.next(); //注意，该循环内最好只有与1个.next()，不然不成对时会报错
          ...
          //al.add(); 不能使用！  当我们通过.iterator方法后，会出现 集合，迭代器两种方式操作集合数组，当迭代器正在执行取出操作过程中又用到了集合的功能操作元素的话会出现【并发访问】安全隐患
        }
        ----->用完就释放it资源
        for(Iterator it = al.iterator();it.hasNext();){
          it.next();
        }

  listIterator(); List集合特有的迭代器，列表迭代器。是Iterator的子接口，在迭代时，不可以通过集合对象的方法操作集合中的元素，因为会发生ConcurrentModificationException异常。
  如果想要其他的操作如添加，修改等，就需要使用其子接口，ListIterator
  该接口只能通过List集合的listIterator方法获取。
   接口中，还含有 .hasPrevious() .previous()方法

-----------------------------------
LinkedList模拟堆栈或者队列数据结构
  堆栈：先进后出
  队列：先进先出

------------------------------------
泛型
  1.5后用于解决安全问题的一个机制

  好处：
    将运行时期出现问题ClassCastException，转移到了编译时期，方便于程序员解决问题。让运行时问题减少，安全
    避免了强制转换麻烦

  ArrayList<String> 容器中的元素是String类型，通过<>来定义要操作的引用数据类型

  在使用java提供的对象时，通常在集合框架中很常见，只要见到<>就要定义泛型
  其实<> 就是用来接收类型的
  当使用集合时，将集合中要存储的数据类型作为参数传递到<>中即可
  class GenericDemo2 {
  	public static void main(String[] args) {
  		TreeSet<String> ts = new TreeSet<String>(new LenComparator());

  		ts.add("");

  		Iterator<String> it = ts.iterator();

  		while(it.hasNext()){
  			String s = it.next();
  			System.out.println(s);
  		}
  	}
  }


  class LenComparator implements Comparator<String>{
  	public int compare(String o1,String o2){
  		int num = new Integer(o2.length()).compareTo(new Integer(o1.length()));

  		if(num==0)
  			return o2.compareTo(o1);
  		return num;
  	}
  }

---------------------
泛型类
  当类中要操作的引用数据类型不确定的时候，
  早期定义Object来完成扩展
  现在定义泛型来完成扩展

  class Utils<T>
  {
  	private T t;
  	public void setObject(T t)
  	{
  		this.t = t;
  	}
  	public T getObject()
  	{
  		return t;
  	}
  }


  class  GenericDemo3
  {
  	public static void main(String[] args)
  	{

  		Utils<Worker> u = new Utils<Worker>();

  		u.setObject(new Student());
  		Worker w = u.getObject();;
  		/*
  		Tool t = new Tool();
  		t.setObject(new Student());
  		Worker w = (Worker)t.getObject();
  		*/
  	}
  }

  泛型类定义的泛型，在整个类中有效。如果被方法使用，
  那么泛型类的对象明确要操作的具体类型后，所有要操作的类型就已经固定了

  为了让不同方法可以操作不同类型，而且类型还不确定
  那么可以将泛型定义在方法上,且，泛型类上也可以定义泛型方法

  注意：静态方法不可以访问类上定义的泛型，如果静态方法操作的应用数据类型不确定，可以将泛型定义在方法上
  public static <T>只能放在返回值类型的前面 void show(T t){

  }

  --------
  泛型接口
    interface Inter<T>
    {
    	void show(T t);
    }

    class InterImpl<T> implements Inter<T>
    {
      public void show(T t)
      {
        System.out.println("show :"+t);
      }
    }

  ----------------------------------------------
  泛型限定：
    //ArrayList<Fu> class = new ArrayList<Zi>();  泛型中，不允许存在该写法
    泛型限定有上下两个限定范围
      ArrayList<? extends Fu> 该数组表可以限定为只能接受父类与其子类 上限
      ? super Zi  只能接受子类与其父类  下限

        参照TreeSet的构造方法

  -------------------------------------------------
  泛型限定 比较器的标准写法
    class Comp implements Comparator<Fu>{
      public int compare(Fu f1,Fu f2){
        return    ;
      }
    }

-----------------------------------------------
Map集合--->双列集合
当数据之间存在这映射关系时，就要先想map集合
  Map<Key,value>
    HashMap:底层是哈希表数据结构，不可存入null的键值，线程同步但效率低
    Hashtable：底层是哈希表数据结构，允许使用 null键值，线程不同步，取代HashMap
    TreeMap：二叉树数据结构，线程不同步，可以对键进行排序 ~ Set 底层使用了Map

  该集合存储键值对，键唯一

  添删判获
  1，添加
    put(K key, V value) 键相同时，值会被覆盖
    putAll(Map<? extends K,? extends V> m)

  2，删除
    clear()
    remove(Object key)

  3，判断
    containsValue(Object value)
    containsKey(Object key)
    isEmpty()


  4，获取
    get(Object key) 可以通过get方法的返回值来判断一个键是否存在
    size()
    values()

    keySet()：将map中所有的键存入Set集合，Set具备迭代器，可以通过迭代方式取出所有键，在根据get方法，获取每一个值

      Set<键类型> keySet = map.keySet();
      Iterator<键类型> it = keySet().iterator();
      while(it.hasNext()){
        键类型 key = it.next();
        值类型 Value = map.getValue(key);
      }


    Set<> entrySet()：将map集合中的映射关系存入到了set集合中,而这个关系的数据类型就是：Map.Entry 然后再通过getKey与getVaule方法取出键值
    Map.Entry 其实Entry也是一个接口，它是Map接口中的一个内部接口

    Set<Map.Entry<String,String>> entrySet = map.entrySet();

		Iterator<Map.Entry<String,String>> it = entrySet.iterator();

		while(it.hasNext()){
			Map.Entry<String,String> me = it.next();
			String key = me.getKey();
			String value = me.getValue();

			System.out.println(key+":"+value);
		}


---------------------------------------------
Map扩展
  map集合被使用是因为具备映射关系
    大集合内有小集合
      HashMap<String,HashMap<String,String>>

--------------------------------------------
集合框架工具类 Utilities
  Collections Arrays

  Collections工具类：对集合进行操作  对象比大小，不是compareTo() 就是compare()
    Collections.sort()
    Collections.max()
    Collections.binarySearch(对象，内容) 如果是负数，表明该集合没有该元素且插入点可以是这个位置-1
    Collections.fill() 将集合中的元素全部替换成指定内容
    Collections.replaceAll(对象，老值，新值)
    Collections.reverse(对象) 反转  ---->swap()
    Collections.reverseOrder() 返回一个比较强，强行逆转实现了对象的自然排序

    SynchronizedList(),Map(),Set()

    shuffle() 重新以随机方式排序

  Arrays
    asList 将数组变成集合 好处：可以用集合的思想 坏处：因为数组长度固定，不可以使用集合的增删操作 UNsupportOperationException

    如果数组中的元素都是对象。那么变成集合时，数组中的元素就直接转成集合中的元素
		如果数组中的元素都是基本数据类型，那么会将该数组作为集合中的元素存在

    toArray 可以限定对元素的操作。不需要进行增删了
    当指定类型的数组长度小于了集合的size，那么该方法内部会创建一个新的数组。长度为集合的size
    当指定类型的数组长度大于了集合的size，就不会新创建了数组。而是使用传递进来的数组
		所以创建一个刚刚好的数组最优
    ArrayList<String> al = new ArrayList<String>();

    al.add("_");

    String[] arr = al.toArray(new String[al.size()]);

    foreach 与迭代器
    迭代器除了遍历，还可以进行remove集合中元素的动作。
    如果是用ListIterator，还可以在遍历过程中对集合进行增删改查的动作

    对HashMap的变量
      HashMap<Integer,String> hm = new HashMap<Integer,String>();

      hm.put(1,"a");
      hm.put(2,"b");
      hm.put(3,"c");

      Set<Integer> keySet = hm.keySet();
      for(Integer i : keySet){
        System.out.println(i+"::"+hm.get(i));
      }
