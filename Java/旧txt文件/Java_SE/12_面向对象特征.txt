封装 Encapsulation 【public     private   protect protected】

  隐藏对象属性和实现细节，仅对外提供公共访问方式

  好处:变换隔离
      便于使用
      提高重用
      提高安全性
  原则：不需要对外提供的都隐藏
      属性隐藏，提供公共方法访问

私有仅仅是封装的一种方式
之所以对外提供访问方式，就因为可以在访问方式中加入逻辑判断等语句。
对访问的数据进行操作。提高代码健壮性。


class Class{
  private 数据类型 私有成员变量

    public void set私有成员变量(数据类型 私有成员变量){
      this.私有成员变量 = 私有成员变量;
      //逻辑！
    }
    public 数据类型 get私有成员变量(){
      return 私有成员变量;
    }
}

默认权限鉴于public 和private 的protect

  不同包的子类中的不同权限protected被保护的
  不同包中的类可以存在继承关系

  当一个父类中的成员被protected修饰后，对于其他包中的类想要访问该成员，就必须继承该父类，即不同包中的子类可以直接访问父类中被protected权限修饰的成员

    包与包之间可以使用的权限只有两种，public protected

             public   protected       default     private
同一个类中     ok         ok             ok          ok
同一个包中     ok         ok             ok
子类           ok         ok
不同包中       ok

一个.java文件里面不能出现两个以上的共有类或接口

--------------------------------------------------------
继承 【extends super abstract implements】

  java只支持单继承，对多继承改良多实习 接口interface

  好处：提高复用
      产生关系，形成多态
      提高程序扩展性 重写
  原则：不要为了获取其他类的功能简化代码而继承
  注意：子类权限大于父类才能覆盖
      静态只能覆盖静态

  子父同名成员：访问本类用this，父类super
    子类函数同名于父类--->【覆盖，重写】-->注意区分重写和重载
    重载：只看同名函数的参数列表
    重写：子类方法要一模一样

    子类具备功能但是功能内容和父类不一致-->保留父类功能定义，重写功能内容-->如果是针对父类的扩展，那么再用super继承调用功能

    子类生成的对象会依次访问父类super(__) 子类的构造函数--->这里的super( )空参默认，但是如果父类是被覆盖的构造函数，则一定要手动指定super(_);--->因为子类可以直接获取父类中的数据，所以子类对象在建立时，需要先查看父类是如何对这些数据进行舒适化的---->需要访问特定的则手动指定super

    this() super()在构造函数的调用关系--->子类中的构造函数中至少有一个super()
    ----------------
    抽象【abstract】

      多个类中出现相同功能，但功能主题不同，这是向上抽取，只抽取功能定义，不抽取功能主体
      抽象方法必须存在抽象类中，抽象的意义只能在继承中，即类或接口里
      abstract Class{
        abstract method()；
      }

      特点：抽象类不可以用new创建对象，因为抽象方法没意义
          抽象类中的方法要被使用，子类必须复写所有的抽象方法后，建立子类对象调用
            只覆盖部分抽象方法则子类还是抽象类

      特殊：抽象类中可以不定义抽象方法，仅让类不能生成对象

      ----------------------
      接口【Interface】实现【implements】
        初期理解：当抽象类中的方法都是抽象的，那么该类可以通过接口的形式来表示
        在类中，有些方法不应该是类所应该具备的行为，所以，将这些行为抽取出来接口，有需要的就用，不需要的就不实现接口

        接口的格式特点：
          接口常见定义：常量，抽象方法
          接口中的成员都有固定修饰符：
          【常量：public static final 方法public abstract】--->接口中的成员都是public的，其修饰符都可以省略

        接口可以被类多实现，因为接口中是没有方法主体的，即使有重名，一次重写就可全部覆盖

        接口间也是继承关系，并且可以多继承！

        接口特点：
          接口是对外暴露的规则

          接口可以用来多实现
          类与接口之间是实现关系，类可以继承一个类同时实现多个接口
          接口与接口之间可以有继承关系

        好处：
          接口是程序的功能扩展
          降低耦合性

----------------------------------------------------------------------
多态：事物存在的多种体现形态(人有男人与女人)
    java中针对于类，且自始至终都是子类_对象_在做着变换
    体现：
      父类具备子类的多种形态，一个多种对象同时具备多种形态。
      父类的引用指向了(接受了)自己的子类对象

    ClassFu cf = new ClassZi(); //类型提升(向上转型)---->c这个对象，同时就具备了ClassFu和ClassZi两种特性，之后不管是 new ClassZi2() 都能在调用这些父类这些抽象方法的时候简化代码

    public static void function(ClassFu cf){
      cf.父类的抽象方法； //即分类去强迫子类都去完成的方法-->重写
      //当然，function里面可以有不同子类的特有行为，针对这些特有行为的调用
      if(cf instaceof ClassZi){
          Zi的特有行为方法
      }
      if(cf instanceof ClassZi2){
        Zi2的特有行为方法
      }
    }

    好处：
      提高代码的扩展性
    弊端：
      只能使用父类的引用访问父类中的成员

    此时对于ClassFu cf = new ClassZi()如果需要调用子类的行为就要向下转型
    ClassZi cz = (ClassZi) cf；

    多态成员特点，使用注意：
      在编译时期：参阅引用型变量所属的类中是否有调用的方法。如果有，编译通过，如果没有编译失败。
      在运行时期：参阅对象所属的类中是否有调用的方法。
      简单总结就是：成员函数在多态调用时，编译看左边，运行看右边。

    实际开发重写是不用再静态上的：
      在多态中，成员变量的特点：
        无论编译和运行，都参考左边(引用型变量所属的类)。
        即ClassFu cf = new ClassZi();时
        ClassFu中如果有和ClassZi相同的同名变量时，取左边ClassFu内的变量值


      在多态中，静态成员函数的特点：
        无论编译和运行，都参考做左边。-->在静态区，一进内存就被绑定


      应用：
        interface PCI{            //接口，所有类都要重写两方法---->给要求
        	public void open();
        	public void close();
        }

        class MainBoard{  //
        	public void run(){ //自己的方法
        		System.out.println("mainboard run ");
        	}
        	public void usePCI(PCI p){   //PCI p = new NetCard()//接口算一种特殊父类--->多态--->接口型引用指向自己的子类对象---->拿这些要求干什么
            if(p!=null){
        			p.open();  //使用被实现的要求
        			p.close();
        		}
        	}
        }
        class NetCard implements PCI{ //实现PCI接口
        	public void open(){
        		System.out.println("netcard open");
        	}
        	public void close(){
        		System.out.println("netcard close");
        	}
        }
        class SoundCard implements PCI{
        	public void open(){
        		System.out.println("SoundCard open");
        	}
        	public void close(){
        		System.out.println("SoundCard close");
        	}
        }

      小知识：_Dao。 date access object 数据访问对象
