AJAX 异步JavaScirpt和XML(Asynchronous JavaScript and XML)
  创建快速动态网页
  XMLHttpRequest 是 AJAX 的基础，XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新

  XMLHTTPRequest的创建
    variable=new XMLHttpRequest();
      //较老IEvariable=new ActiveXObject("Microsoft.XMLHTTP");
      /*var xmlhttp;
        if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
          xmlhttp=new XMLHttpRequest();
        }
        else{// code for IE6, IE5
          xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
        }*/

XMLHTTPRequest的请求发送
  xmlhttp.open("GET/POST",url,async是否异步的Boolean);  为了避免得到缓存结果，向url添加唯一ID url+Math.random()?
  //对于POST来说，如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据
  //setRequestHeader(header,value) header: 规定头的名称 value: 规定头的值
  xmlhttp.send(); //将请求发送到服务器，string：仅用于 POST 请求


当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：
  xmlhttp.onreadystatechange=function(){
    if (xmlhttp.readyState==4 && xmlhttp.status==200){
      document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
    }
  }
  xmlhttp.open("GET","test1.txt",true);
  xmlhttp.send();

XMLHTTPRequest的响应
  得来自服务器的响应，请使用 XMLHttpRequest 对象的属性
  responseText
    获得字符串形式的响应数据
    例如：document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
  responseXML
    获得 XML 形式的响应数据
    例如：请求 books.xml 文件，并解析响应：
      xmlDoc=xmlhttp.responseXML;
      txt="";
      x=xmlDoc.getElementsByTagName("ARTIST");
      for (i=0;i<x.length;i++){
        txt=txt + x[i].childNodes[0].nodeValue + "<br />";
      }
      document.getElementById("myDiv").innerHTML=txt;


XMLHttpRequest onreadystatechange事件，三个重要属性
  onreadystatechange
    存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。
  readyState
    存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
      0: 请求未初始化
      1: 服务器连接已建立
      2: 请求已接收
      3: 请求处理中
      4: 请求已完成，且响应已就绪
  status
    200: "OK"
    404: 未找到页面

  当 readyState 等于 4 且状态为 200 时，表示响应已就绪
    xmlhttp.onreadystatechange=function() {
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {
        document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
      }
    }

  callback 函数是一种以参数形式传递给另一个函数的函数。
  如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。
  该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：
  function myFunction(){
    loadXMLDoc("ajax_info.txt",function(){
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {
        document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
      }
    });
  }


==========================================================
AJAX PHP ASP 实例
当用户在上面的输入框中键入字符时，会执行函数 "showHint()" 。该函数由 "onkeyup" 事件触发
function showHint(str){ //触发函数
  var xmlhttp;  //声明一个xmlhttprequest对象
  if (str.length==0){ //如果输入框为空，则在失去焦点时，清空 txtHint 占位符的内容，并退出函数
    document.getElementById("txtHint").innerHTML="";
    return;
  }
  if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
    xmlhttp=new XMLHttpRequest();
  }
  else{// code for IE6, IE5 适配工作
    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlhttp.onreadystatechange=function(){
    if (xmlhttp.readyState==4 && xmlhttp.status==200){   //响应是否处于就绪阶段
      document.getElementById("txtHint").innerHTML=xmlhttp.responseText;
    }
  }
  xmlhttp.open("GET","gethint.asp?q="+str,true);  //组件请求，并添加了参数Q
  xmlhttp.send(); //请求发送
}

/* ASP脚本
<%
response.expires=-1
dim a(30)
'用名字来填充数组
a(1)="Anna"
a(2)="Brittany"
a(3)="Cinderella"
a(4)="Diana"
a(5)="Eva"
a(6)="Fiona"
a(7)="Gunda"
a(8)="Hege"
a(9)="Inga"
a(10)="Johanna"
a(11)="Kitty"
a(12)="Linda"
a(13)="Nina"
a(14)="Ophelia"
a(15)="Petunia"
a(16)="Amanda"
a(17)="Raquel"
a(18)="Cindy"
a(19)="Doris"
a(20)="Eve"
a(21)="Evita"
a(22)="Sunniva"
a(23)="Tove"
a(24)="Unni"
a(25)="Violet"
a(26)="Liza"
a(27)="Elizabeth"
a(28)="Ellen"
a(29)="Wenche"
a(30)="Vicky"

'获得来自 URL 的 q 参数
q=ucase(request.querystring("q"))

'如果 q 大于 0，则查找数组中的所有提示
if len(q)>0 then
  hint=""
  for i=1 to 30
    if q=ucase(mid(a(i),1,len(q))) then
      if hint="" then
        hint=a(i)
      else
        hint=hint & " , " & a(i)
      end if
    end if
  next
end if

'如果未找到提示，则输出 "no suggestion"
'否则输出正确的值
if hint="" then
  response.write("no suggestion")
else
  response.write(hint)
end if
%>
*/
=========================================================

/*PHP脚本
<?php
// 用名字来填充数组
$a[]="Anna";
$a[]="Brittany";
$a[]="Cinderella";
$a[]="Diana";
$a[]="Eva";
$a[]="Fiona";
$a[]="Gunda";
$a[]="Hege";
$a[]="Inga";
$a[]="Johanna";
$a[]="Kitty";
$a[]="Linda";
$a[]="Nina";
$a[]="Ophelia";
$a[]="Petunia";
$a[]="Amanda";
$a[]="Raquel";
$a[]="Cindy";
$a[]="Doris";
$a[]="Eve";
$a[]="Evita";
$a[]="Sunniva";
$a[]="Tove";
$a[]="Unni";
$a[]="Violet";
$a[]="Liza";
$a[]="Elizabeth";
$a[]="Ellen";
$a[]="Wenche";
$a[]="Vicky";

//获得来自 URL 的 q 参数
$q=$_GET["q"];

//如果 q 大于 0，则查找数组中的所有提示
if (strlen($q) > 0)
  {
  $hint="";
  for($i=0; $i<count($a); $i++)
    {
    if (strtolower($q)==strtolower(substr($a[$i],0,strlen($q))))
      {
      if ($hint=="")
        {
        $hint=$a[$i];
        }
      else
        {
        $hint=$hint." , ".$a[$i];
        }
      }
    }
  }

// 如果未找到提示，则把输出设置为 "no suggestion"
// 否则设置为正确的值
if ($hint == "")
  {
  $response="no suggestion";
  }
else
  {
  $response=$hint;
  }

//输出响应
echo $response;
?>
*/


===========================================================
AJAX 和数据库
function showCustomer(str)
{
var xmlhttp;
if (str=="")
  {
  document.getElementById("txtHint").innerHTML="";
  return;
  }
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 && xmlhttp.status==200)
    {
    document.getElementById("txtHint").innerHTML=xmlhttp.responseText;
    }
  }
xmlhttp.open("GET","getcustomer.asp?q="+str,true);
xmlhttp.send();
}

ASP部分
<%
response.expires=-1
sql="SELECT * FROM CUSTOMERS WHERE CUSTOMERID="
sql=sql & "'" & request.querystring("q") & "'"

set conn=Server.CreateObject("ADODB.Connection")
conn.Provider="Microsoft.Jet.OLEDB.4.0"
conn.Open(Server.Mappath("/db/northwind.mdb"))
set rs=Server.CreateObject("ADODB.recordset")
rs.Open sql,conn

response.write("<table>")
do until rs.EOF
  for each x in rs.Fields
    response.write("<tr><td><b>" & x.name & "</b></td>")
    response.write("<td>" & x.value & "</td></tr>")
  next
  rs.MoveNext
loop
response.write("</table>")
%>

=====================================================================
AJAX XML
function loadXMLDoc(url)
{
var xmlhttp;
var txt,xx,x,i; //txt表示整个需要添加的文本，x表示xml中的一组数据,xx表示该组数据中我们需要的artist和title ，i作为累加遍历xml
if (window.XMLHttpRequest)  //适配
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 && xmlhttp.status==200) //就绪状态
    {
    txt="<table border='1'><tr><th>Title</th><th>Artist</th></tr>";  //组件表格
    x=xmlhttp.responseXML.documentElement.getElementsByTagName("CD"); //获取元素
    for (i=0;i<x.length;i++)
      {
      txt=txt + "<tr>"; //新增一行
      xx=x[i].getElementsByTagName("TITLE");  //获取XML中Title一列添加
        {
        try
          {
          txt=txt + "<td>" + xx[0].firstChild.nodeValue + "</td>"; //下一个孩子的值
          }
        catch (er)  //异常捕捉
          {
          txt=txt + "<td> </td>";
          }
        }
    xx=x[i].getElementsByTagName("ARTIST"); //获取XML中Artist一列
      {
        try
          {
          txt=txt + "<td>" + xx[0].firstChild.nodeValue + "</td>";
          }
        catch (er)
          {
          txt=txt + "<td> </td>";
          }
        }
      txt=txt + "</tr>"; //结束一行
      }
    txt=txt + "</table>"; //结束表格
    document.getElementById('txtCDInfo').innerHTML=txt; //添加TXT
    }
  }
xmlhttp.open("GET",url,true); //组合请求
xmlhttp.send(); //发送
}
