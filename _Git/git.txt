git 的学习

分布式版本控制系统（集中式版本控制系统CVS SVN）
  git的跟踪管理的是 修改  而非文件

git的命令
    创建一个新文件夹
    用cd ...目录 调到目录

  $git init /将此目录设置为git仓库目录。

    编写一个readme.txt用于调试学习
  $git add 文件名 /将此文件添加到仓库
  $git commit -m'对于此次修改的说明' /告诉git，将文件提交到仓库

    修改readme.txt后
  $git status /仓库的当前状态，有没有被修改 如：readme.txt被修改了但是还没有被提交。
  $git diff /查看具体修改了什么内容

  $git add /再次提交

  $git log /显示从最近到最远的提交日志
          --pretty=oneline /一串数字字符串是commit ID版本号（SVN commit ID是从1开始）
    在git中，用head表示当前版本，head^^表示上上以个版本，head~100表示往上100个版本。

  $git reset -hard HEAD^ /回退至上一个版本
  $git reset -hard 'commit id' /回退之后再返回至已被覆盖的最新版本
    如果不记得commit id
  $git reflog /查看git记录下的你的每一次命令，去查找commit id

  $git checkout -- '文件' /把文件在 工作区的修改全部撤销。同时也可以恢复被删除的文件   （丢掉对工作区的修改
  $git reset HEAD '文件' /回退版本，或者将暂存区的修改回退到工作区  （在已add的情况下 结合checkout丢掉对暂存区的修改

  $git rm '文件' /从版本库中删除文件 （$rm '文件' /单就删除文件，版本库和工作区处于不一致的状态


git 的区域
  工作区 定义进仓库的文件夹
    隐藏文件夹 .git git的版本库
        版本库中又含有 stage（或叫index）的暂存区 和git帮我们自动创建的第一个分支master，以及指向master的指针HEAD
          git add执行了将文件添加到暂存区的操作  而git commit把暂存区的内容提交至分支

GitHub
  git是使用SSH连接的
  创建仓库后有两种操作：从这个仓库中克隆出新的仓库，或者把自己的一个本地仓库与之关联
   $git remote add origin git @github.com:_____(你的用户名)/__.git文件
      推送时需要检验SSH key公钥是否在账户列表里
      （origin 是远程库的意思）
   $git push origin master/将本地内容推送至远程库 （如果第一次推送master分支，加上 -u 参数 $git push -u origin master

  一般先建立远程库再进行克隆
  $git clone git@github.com:____（用户名）/__.git文件
    同时github 支持多种协议 ，默认git://（使用的是ssh） 也可以用https协议 
